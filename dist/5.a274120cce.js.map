{"version":3,"file":"5.a274120cce.js","sources":["webpack:///webpack/bootstrap","webpack:///./src/demos/slider/slider-page.less","webpack:///./src/demos/slider/Options.ts","webpack:///./src/demos/slider/Slider.ts","webpack:///./src/demos/slider/slider-page.ts","webpack:///./src/tools/EventEmitter.ts","webpack:///./src/tools/dom.ts"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 174);\n","// extracted by mini-css-extract-plugin","export type SliderVal = number | number[];\r\n\r\nexport class Options {\r\n  // 可索引类型，该类下的所有属性的key必须是字符串，值为any\r\n  [key: string]: any;\r\n\r\n  step = 1;\r\n\r\n  // 当设置了step时，是否按照step移动\r\n  accordingToStep = true;\r\n  \r\n  // 最小值\r\n  min = 0;\r\n\r\n  // 最大值\r\n  max = 100;\r\n\r\n  value: SliderVal = 0;\r\n\r\n  // 是否双滑块\r\n  range = false;\r\n\r\n  // 是否显示断点\r\n  showDots = false;\r\n  \r\n  // 自定义事件\r\n  onChanging: (value: SliderVal) => void;\r\n  onChange: (value: SliderVal) => void;\r\n  onInit: (value: SliderVal) => void;\r\n  \r\n  \r\n  // 合并默认配置\r\n  merge(options?: { [key: string]: any }) {\r\n    if (options) {\r\n      for (let key in options) {\r\n        this[key] = options[key];\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n}","import EventEmitter from \"../../tools/EventEmitter.ts\";\r\nimport {Options} from \"./Options.ts\";\r\nimport DomHandler from \"../../tools/dom.ts\";\r\n\r\ntype EventType = MouseEvent | TouchEvent;\r\ntype BarStyle = { width: number, left: number; };\r\n\r\nexport default class Slider extends EventEmitter {\r\n  // 配置项\r\n  private readonly options: Options;\r\n\r\n  // 容器\r\n  private el: HTMLElement;\r\n\r\n  // 按钮\r\n  private btns: HTMLCollectionOf<Element>;\r\n\r\n  // 色条bar\r\n  private bar: HTMLElement;\r\n  private dots: NodeListOf<Element>;\r\n\r\n  // 容器长度\r\n  private sliderWidth: number;\r\n\r\n  // 最大/最小值的差\r\n  private valueRange: number;\r\n\r\n  // 按下的是哪个滑块\r\n  private pointerDown: string;\r\n\r\n  // 是否正在拖拽\r\n  private dragging = false;\r\n\r\n  // 鼠标按下的位置\r\n  private start = 0;\r\n\r\n  private startVal = 0;\r\n\r\n  // 移动时的位置\r\n  private current = 0;\r\n\r\n  private currentValue:  number[];\r\n\r\n  private domHandle: DomHandler;\r\n\r\n  private moveEvents = {};\r\n\r\n  // 事件句柄\r\n  private handleMove: (e: MouseEvent | TouchEvent) => void;\r\n  private handleEnd: (e: MouseEvent | TouchEvent) => void;\r\n\r\n  constructor(el: HTMLElement | string, options?: Partial<Options>) {\r\n    super(['changing', 'change']);\r\n    if (!el) return;\r\n    this.el = (typeof el === 'string' ? document.querySelector(el) : el) as HTMLElement;\r\n\r\n    // 合并选项\r\n    this.options = new Options().merge(options);\r\n\r\n    // 赋初始值\r\n    const initVal = this.options.value;\r\n    this.currentValue = initVal ? this.checkLimits(Array.isArray(initVal) ? initVal : [initVal]) : this.checkLimits([0]);\r\n\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    this.domHandle = new DomHandler();\r\n    this.valueRange = this.options.max - this.options.min;\r\n\r\n    let dots = '';\r\n    if (this.options.showDots) {\r\n      // 获取断点\r\n      const dotsArr = this.getDots();\r\n      dotsArr.forEach(dot => {\r\n        const className = dot.active ? 'v-slider-dot active' : 'v-slider-dot';\r\n        dots += `<div class=\"${className}\" style=\"left: ${dot.val}%\"></div>`;\r\n      });\r\n    }\r\n    \r\n    // 渲染dom\r\n    const maxBtnClass = this.options.range ? 'v-slider-button-wrap' : 'v-slider-button-wrap hide';\r\n    this.el.innerHTML = `<div class=\"v-slider-wrap\">\r\n        <!-- 色条 -->\r\n        <div class=\"v-slider-bar\"></div>\r\n\r\n        <!-- 断点 -->\r\n        ${dots}\r\n\r\n        <!-- 色块 -->\r\n        <div class=\"v-slider-button-wrap\" data-type=\"min\">\r\n          <div class=\"v-slider-button\"></div>\r\n        </div>\r\n\r\n        <div class=\"${maxBtnClass}\" data-type=\"max\">\r\n          <div class=\"v-slider-button\"></div>\r\n        </div>\r\n      </div>`;\r\n\r\n\r\n    this.bar = <HTMLElement>this.el.querySelector('.v-slider-bar');\r\n    this.btns = this.el.getElementsByClassName('v-slider-button-wrap');\r\n    this.dots = this.el.querySelectorAll('.v-slider-dot');\r\n    this.sliderWidth = this.domHandle.getOuterWidth(this.el.querySelector('.v-slider-wrap'));\r\n    this.initEvents();\r\n    \r\n    // 初始化滑块和色条的位置\r\n    this.changeButtonPosition();\r\n    this.changeBarStyle();\r\n    const value = this.options.range ? this.exportValue : this.exportValue[0];\r\n    this.emitEvent('onInit', value);\r\n  }\r\n\r\n  private initEvents() {\r\n    this.el.addEventListener('click', this.sliderClick.bind(this));\r\n    this.bar.addEventListener('click', this.sliderClick.bind(this));\r\n\r\n    for(let a = 0; a < this.btns.length; a++) {\r\n      this.btns[a].addEventListener('mousedown', this.handleStart.bind(this));\r\n      this.btns[a].addEventListener('touchstart', this.handleStart.bind(this));\r\n      this.btns[a].addEventListener('click', this.sliderClick.bind(this));\r\n    }\r\n  }\r\n\r\n  // 计算断点个数和位置\r\n  private getDots(): { val: number, active: boolean }[] {\r\n    const dotCount = this.valueRange / this.options.step;\r\n    const dots = [];\r\n    const barStyle = this.changeBarStyle();\r\n\r\n    // (刻度间隔 / 100) = (this.step / this.valueRange)\r\n    const stepWidth = (100 * this.options.step) / this.valueRange;\r\n    for (let i = 1; i < dotCount; i++) {\r\n      const val = i * stepWidth;\r\n      const active = this.isDotActive(val, barStyle);\r\n      dots.push({ val, active });\r\n    }\r\n    return dots;\r\n  }\r\n\r\n\r\n  // 点击slider\r\n  private sliderClick(event) {\r\n    const current = this.getPointer(event);\r\n    const sliderOffsetLeft = this.el.getBoundingClientRect().left;\r\n    // 新值\r\n    let newVal = ((current - sliderOffsetLeft) / this.sliderWidth) * this.valueRange + this.options.min;\r\n    // console.log('newPos :', newPos);\r\n    const { minBtnPoi, maxBtnPoi } = this.btnPosition;\r\n    if (!this.options.range || newVal <= minBtnPoi) {\r\n      this.changeVal(newVal, \"min\");\r\n    } else if (newVal >= maxBtnPoi) {\r\n      this.changeVal(newVal, \"max\");\r\n    } else {\r\n      this.changeVal(newVal, newVal - this.currentValue[0] <= this.currentValue[1] - newVal ? \"min\" : \"max\");\r\n    }\r\n  }\r\n\r\n\r\n  // 滑块按下\r\n  private handleStart(event: EventType) {\r\n    this.pointerDown = (<HTMLElement>event.currentTarget).dataset.type || 'min';\r\n    this.onDragStart(event);\r\n\r\n    this.handleMove = this.onDragMove.bind(this);\r\n    this.handleEnd = this.onDragEnd.bind(this);\r\n    this.moveEvents = {\r\n      mousemove: this.handleMove,\r\n      touchmove: this.handleMove,\r\n      mouseup: this.handleEnd,\r\n      touchend: this.handleEnd\r\n    }\r\n    this.domHandle.addEvents(window, this.moveEvents);\r\n  }\r\n\r\n  private onDragStart(event: EventType) {\r\n    this.dragging = false;\r\n\r\n    // 按下的位置\r\n    this.start = this.getPointer(event);\r\n    this.startVal = this.currentValue[this.pointerDown === \"min\" ? 0 : 1];\r\n  }\r\n\r\n  private onDragMove() {\r\n    console.log('mousemove');\r\n    this.dragging = true;\r\n    this.current = this.getPointer(event);\r\n\r\n    // (变化的值diff / 数值范围) = (鼠标当前位置 - 鼠标起始位置) / 总长\r\n    const diff = ((this.current - this.start) / this.sliderWidth) * this.valueRange;\r\n    const newVal = this.startVal + diff;\r\n    this.changeVal(newVal);\r\n  }\r\n\r\n  private onDragEnd() {\r\n    if (this.dragging) {\r\n      this.dragging = false;\r\n      const value = this.options.range ? this.exportValue : this.exportValue[0];\r\n      this.emitEvent('onChange', value);\r\n      this.trigger('change', value);\r\n    }\r\n    this.pointerDown = null;\r\n    this.domHandle.removeEvents(window, this.moveEvents);\r\n  }\r\n\r\n\r\n  // 改变值\r\n  private changeVal(newVal, type = this.pointerDown) {\r\n    const index = type === \"min\" ? 0 : 1;\r\n    if (type === \"min\") {\r\n      newVal = this.checkLimits([newVal, this.options.max])[0];\r\n    } else {\r\n      newVal = this.checkLimits([this.options.min, newVal])[1];\r\n    }\r\n//      console.log('newVal :', newVal);\r\n\r\n    const modulus = newVal % this.options.step;\r\n    let value = this.currentValue;\r\n\r\n    // 当accordingToStep === true时，newVal - modulus保证是整数\r\n    value[index] = this.options.accordingToStep ? newVal - modulus : newVal;\r\n    value = this.checkValue(value);\r\n    // console.log(\"move :\", newVal, value, modulus);\r\n    this.currentValue = value.slice();\r\n    this.changeButtonPosition();\r\n    this.changeBarStyle();\r\n    this.changeDotStyle();\r\n\r\n    this.emitEvent('onChanging', value);\r\n    this.trigger('changing', value);\r\n\r\n   /* if (!this.dragging) {\r\n      if (this.currentValue[index] !== this.oldValue[index]) {\r\n        this.emitChange();\r\n        this.oldValue[index] = this.currentValue[index];\r\n      }\r\n    }*/\r\n  }\r\n\r\n\r\n  // 保证currentValue的大小关系\r\n  private checkValue(value: number[]): number[] {\r\n    const val = value.slice();\r\n    if (val[0] > val[1]) {\r\n      [val[0], val[1]] = [val[1], val[0]];\r\n    }\r\n    return val;\r\n  }\r\n\r\n  // 根据当前值改变按钮位置\r\n  private changeButtonPosition() {\r\n    const val = this.currentValue;\r\n    // (当前位置 / 100) = (当前数值 - 最小数值) / 数值范围\r\n    const { minBtnPoi, maxBtnPoi } = this.btnPosition;\r\n    (<HTMLElement>this.btns[0]).style.left = minBtnPoi + '%';\r\n    if (this.btns[1]) {\r\n      (<HTMLElement>this.btns[1]).style.left = maxBtnPoi + '%';\r\n    }\r\n  }\r\n\r\n  // 根据值改变色条样式\r\n  private changeBarStyle(): BarStyle {\r\n    const style = { width: 0, left: 0 };\r\n    if (this.options.range) {\r\n      style.left = ((this.currentValue[0] - this.options.min) / this.valueRange) * 100;\r\n      style.width = ((this.currentValue[1] - this.currentValue[0]) / this.valueRange) * 100;\r\n    } else {\r\n      style.width = ((this.currentValue[0] - this.options.min) / this.valueRange) * 100;\r\n    }\r\n    if (this.bar) {\r\n      this.bar.style.width = style.width + '%';\r\n      this.bar.style.left = style.left + '%';\r\n    }\r\n    return style;\r\n  }\r\n\r\n  // 改变断点样式\r\n  private changeDotStyle() {\r\n    this.dots = this.el.querySelectorAll('.v-slider-dot');\r\n    const barStyle = this.changeBarStyle();\r\n\r\n    for (let i = 0; i < this.dots.length; i++) {\r\n      // 每个dot的left值， +4是因为每个dot都设置了margin-left: 4px。\r\n      // 也可以直接用getComputedStyle获取\r\n      // console.log(this.domHandle.getStyle(dots[i], 'left').slice(0, -2));\r\n      const left = (((<HTMLElement>this.dots[i]).offsetLeft + 4) / this.sliderWidth) * 100;\r\n      const active = this.isDotActive(left, barStyle);\r\n      if (active) {\r\n        this.dots[i].classList.add('active');\r\n      }else {\r\n        this.dots[i].classList.remove('active');\r\n      }\r\n    }\r\n  }\r\n\r\n  private isDotActive(left: number, barStyle: BarStyle): boolean {\r\n    return this.options.range\r\n      ? left > barStyle.left && left < barStyle.left + barStyle.width\r\n      : left < barStyle.width;\r\n  }\r\n\r\n\r\n\r\n  private getPointer(event) {\r\n    return event.type.indexOf(\"touch\") !== -1 ? event.touches[0].clientX : event.clientX;\r\n  }\r\n\r\n  private checkLimits([min, max]: number[]): number[] {\r\n    min = Math.max(this.options.min, min);\r\n    min = Math.min(this.options.max, min);\r\n    if (max) {\r\n      max = Math.max(this.options.min, min, max);\r\n      max = Math.min(this.options.max, max);\r\n    }else {\r\n      max = this.options.max;\r\n    }\r\n    return [min, max];\r\n  }\r\n\r\n\r\n  // 发射自定义事件\r\n  private emitEvent(type: string, args: any) {\r\n    if (this.options[type]) {\r\n      this.options[type](args);\r\n    }\r\n  }\r\n\r\n\r\n  // 最终的value\r\n  get exportValue() {\r\n    // step是小数就等于1，否则等于0\r\n    const decimalCases = (String(this.options.step).split(\".\")[1] || \"\").length;\r\n    return this.currentValue.map(nr => Number(nr.toFixed(decimalCases)));\r\n  }\r\n\r\n  // 获取左右滑块的位置\r\n  get btnPosition() {\r\n    const val = this.currentValue;\r\n    // (当前位置 / 100) = (当前数值 - 最小数值) / 数值范围\r\n    const minBtnPoi = ((val[0] - this.options.min) / this.valueRange) * 100;  // 左滑块\r\n    const maxBtnPoi = ((val[1] - this.options.min) / this.valueRange) * 100;  // 右滑块\r\n    return { minBtnPoi, maxBtnPoi };\r\n  }\r\n}","import './slider-page.less';\r\nimport Slider from \"./Slider.ts\";\r\nimport {SliderVal} from \"./Options.ts\";\r\n\r\nwindow.addEventListener('DOMContentLoaded', function () {\r\n  console.log('slider 6-29');\r\n  const secs = document.getElementsByClassName('sec');\r\n  const boxes = document.getElementsByClassName('box');\r\n  const slider = new Slider(<HTMLElement>boxes[0], {\r\n    value: [10, 90],\r\n    range: true,\r\n    onInit(val: SliderVal) {\r\n      const b = secs[0].getElementsByTagName('b');\r\n      b[0].innerText = val[0];\r\n      b[1].innerText = val[1];\r\n    }\r\n  });\r\n\r\n  slider.on('changing', function (val: SliderVal) {\r\n    const b = secs[0].getElementsByTagName('b');\r\n    b[0].innerText = val[0];\r\n    b[1].innerText = val[1];\r\n  });\r\n\r\n\r\n\r\n  const slider2 = new Slider(<HTMLElement>boxes[1], {\r\n    value: [10, 90],\r\n    range: true,\r\n    step: 10,\r\n    showDots: true,\r\n    onInit(val: SliderVal) {\r\n      const b = secs[1].getElementsByTagName('b');\r\n      b[0].innerText = val[0];\r\n      b[1].innerText = val[1];\r\n    }\r\n  });\r\n\r\n  slider2.on('change', function (val: SliderVal) {\r\n    const b = secs[1].getElementsByTagName('b');\r\n    b[0].innerText = val[0];\r\n    b[1].innerText = val[1];\r\n  });\r\n\r\n\r\n  const slider3 = new Slider(<HTMLElement>boxes[2], {\r\n    value: [2, 7],\r\n    range: true,\r\n    min: 1,\r\n    max: 10,\r\n    onInit(val: SliderVal) {\r\n      const b = secs[2].getElementsByTagName('b');\r\n      b[0].innerText = val[0];\r\n      b[1].innerText = val[1];\r\n    }\r\n  });\r\n\r\n  slider3.on('changing', function (val: SliderVal) {\r\n    const b = secs[2].getElementsByTagName('b');\r\n    b[0].innerText = val[0];\r\n    b[1].innerText = val[1];\r\n  });\r\n});","/*\r\n* 这个自定义事件的类是参考黄大仙Bscroll的设计\r\n* */\r\ntype EventsMap = {\r\n  [name: string]: [Function, Object][];\r\n}\r\n\r\ntype TypesMap = {\r\n  [type: string]: string;\r\n}\r\n\r\nexport default class EventEmitter {\r\n  private events: EventsMap;\r\n  private eventTypes: TypesMap;\r\n  constructor(names: string[]) {\r\n    this.events = {};\r\n    this.eventTypes = {};\r\n    names.forEach(type => this.eventTypes[type] = type);\r\n  }\r\n  \r\n  on(type: string, fn: Function, context = this) {\r\n    if (!this.events[type]) {\r\n      this.events[type] = [];\r\n    }\r\n    \r\n    // 保存type事件对应的函数\r\n    this.events[type].push([fn, context]);\r\n  }\r\n  \r\n  // 触发type事件\r\n  trigger(type: string, ...args: any[]) {\r\n    let events = this.events[type];\r\n    if (!events) return;\r\n    \r\n    let len = events.length;\r\n    let eventsCopy = events.slice();\r\n    let ret;\r\n    for (let i = 0; i < len; i++) {\r\n      let event = eventsCopy[i];\r\n      let [fn, context] = event;\r\n      if (fn) {\r\n        ret = fn.apply(context, args);\r\n        if (ret === true) break;\r\n      }\r\n    }\r\n  }\r\n}","export default class DomHandler {\r\n  addClass(element: any, className: string): void {\r\n    if (element.classList)\r\n      element.classList.add(className);\r\n    else\r\n      element.className += ' ' + className;\r\n  }\r\n  \r\n  addMultipleClasses(element: any, className: string): void {\r\n    if (element.classList) {\r\n      const styles: string[] = className.split(' ');\r\n      for (let i = 0; i < styles.length; i++) {\r\n        element.classList.add(styles[i]);\r\n      }\r\n      \r\n    } else {\r\n      const styles: string[] = className.split(' ');\r\n      for (let i = 0; i < styles.length; i++) {\r\n        element.className += ' ' + styles[i];\r\n      }\r\n    }\r\n  }\r\n  \r\n  removeClass(element: any, className: string): void {\r\n    if (element.classList)\r\n      element.classList.remove(className);\r\n    else\r\n      element.className = element.className.replace(new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\r\n  }\r\n  \r\n  hasClass(element: any, className: string): boolean {\r\n    if (element.classList)\r\n      return element.classList.contains(className);\r\n    else\r\n      return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);\r\n  }\r\n\r\n\r\n  appendChild(element: HTMLElement, target: HTMLElement) {\r\n    target.appendChild(element);\r\n  }\r\n\r\n  removeChild(element: HTMLElement, target: HTMLElement) {\r\n    target.removeChild(element);\r\n  }\r\n\r\n  getWindowScrollTop(): number {\r\n    let doc = document.documentElement;\r\n\r\n    // clientTop上边框距离\r\n    return (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);\r\n  }\r\n\r\n  getWindowScrollLeft(): number {\r\n    let doc = document.documentElement;\r\n    return (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\r\n  }\r\n\r\n\r\n  fadeIn(element: HTMLElement, duration: number) {\r\n    element.style.opacity = '0';\r\n\r\n    let last = +new Date();\r\n    let opacity = 0;\r\n    const tick = function () {\r\n      // opacity = +element.style.opacity.replace(\",\", \".\") + (new Date().getTime() - last) / duration;\r\n      opacity = +element.style.opacity + (new Date().getTime() - last) / duration;\r\n      element.style.opacity = opacity.toString();\r\n      last = +new Date();\r\n\r\n      if (opacity < 1) {\r\n        (window.requestAnimationFrame && requestAnimationFrame(tick)) || setTimeout(tick, 16);\r\n      }\r\n    };\r\n    tick();\r\n  }\r\n\r\n  getOuterWidth(el, margin?) {\r\n    let width = el.offsetWidth;\r\n\r\n    if (margin) {\r\n      const style = getComputedStyle(el);\r\n      width += parseFloat(style.marginLeft) + parseFloat(style.marginRight);\r\n    }\r\n\r\n    return width;\r\n  }\r\n\r\n\r\n  addEvents(target, obj: { [key: string]: Function }) {\r\n    for (const attr in obj) {\r\n      target.addEventListener(attr, obj[attr]);\r\n    }\r\n  }\r\n\r\n  removeEvents(target, obj: { [key: string]: Function }) {\r\n    for (const attr in obj) {\r\n      target.removeEventListener(attr, obj[attr]);\r\n    }\r\n  }\r\n\r\n  getStyle (element, styleName) {\r\n    if (!element || !styleName) return null;\r\n    styleName = camelCase(styleName);\r\n    if (styleName === 'float') {\r\n      styleName = 'cssFloat';\r\n    }\r\n    try {\r\n      const computed = document.defaultView.getComputedStyle(element, '');\r\n      return element.style[styleName] || computed ? computed[styleName] : null;\r\n    } catch(e) {\r\n      return element.style[styleName];\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction camelCase(name) {\r\n  return name.replace(/([\\:\\-\\_]+(.))/g, function(_, separator, letter, offset) {\r\n    return offset ? letter.toUpperCase() : letter;\r\n  }).replace(/^moz([A-Z])/, 'Moz$1');\r\n}"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClFA;;;;;;;;;;;;;;;;;ACEA;AAAA;AAIA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAiBA;AATA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;ACxCA;AACA;AACA;AAKA;AAAA;AA4CA;AAAA;AArBA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAMA;AAQA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAkvVA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnDA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;AC9CA;AAAA;AAkHA;AAjHA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;;AAIA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}