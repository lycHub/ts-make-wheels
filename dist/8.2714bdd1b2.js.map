{"version":3,"file":"8.2714bdd1b2.js","sources":["webpack:///webpack/bootstrap","webpack:///./src/tools/EventEmitter.ts","webpack:///./src/demos/tree/tree-page.less","webpack:///./src/demos/tree/Options.ts","webpack:///./src/demos/tree/Tree.ts","webpack:///./src/demos/tree/tree-page.ts"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 174);\n","/*\r\n* 这个自定义事件的类是参考黄大仙Bscroll的设计\r\n* */\r\ntype EventsMap = {\r\n  [name: string]: [Function, Object][];\r\n}\r\n\r\ntype TypesMap = {\r\n  [type: string]: string;\r\n}\r\n\r\nexport default class EventEmitter {\r\n  private events: EventsMap;\r\n  private eventTypes: TypesMap;\r\n  constructor(names: string[]) {\r\n    this.events = {};\r\n    this.eventTypes = {};\r\n    names.forEach(type => this.eventTypes[type] = type);\r\n  }\r\n  \r\n  on(type: string, fn: Function, context = this) {\r\n    if (!this.events[type]) {\r\n      this.events[type] = [];\r\n    }\r\n    \r\n    // 保存type事件对应的函数\r\n    this.events[type].push([fn, context]);\r\n  }\r\n  \r\n  // 触发type事件\r\n  trigger(type: string, ...args: any[]) {\r\n    let events = this.events[type];\r\n    if (!events) return;\r\n    \r\n    let len = events.length;\r\n    let eventsCopy = events.slice();\r\n    let ret;\r\n    for (let i = 0; i < len; i++) {\r\n      let event = eventsCopy[i];\r\n      let [fn, context] = event;\r\n      if (fn) {\r\n        ret = fn.apply(context, args);\r\n        if (ret === true) break;\r\n      }\r\n    }\r\n  }\r\n}","// extracted by mini-css-extract-plugin","export type DataTree = {\r\n  title: string;\r\n  expand?: boolean;\r\n  selected?: boolean;\r\n  nodeKey?: number;\r\n  children?: DataTree[];\r\n}\r\n\r\nexport type Flat = {nodeKey: number; parent?: number; children?: number[]; node: DataTree};\r\n\r\nexport class Options {\r\n  // 可索引类型，该类下的所有属性的key必须是字符串，值为any\r\n  [key: string]: any;\r\n  \r\n  \r\n  data: DataTree[];\r\n  \r\n  // 自定义事件\r\n  onSelectChange: (node: Flat[]) => void;\r\n  onInit: (node: Flat[]) => void;\r\n  \r\n  \r\n  // 合并默认配置\r\n  merge(options?: { [key: string]: any }) {\r\n    if (options) {\r\n      for (let key in options) {\r\n        this[key] = options[key];\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n}","import EventEmitter from \"../../tools/EventEmitter.ts\";\r\nimport {Options} from \"./Options.ts\";\r\nimport { DataTree, Flat } from \"./Options\";\r\n\r\n\r\nexport default class Tree extends EventEmitter {\r\n  // 配置项\r\n  private readonly options: Options;\r\n\r\n\r\n  // 容器\r\n  private readonly el: HTMLElement;\r\n\r\n  // 遍历用户传入的data，给每个节点都加上nodeKey，并为每个节点关联其父子关系\r\n  private flatState: Flat[];\r\n\r\n  // 选中的node\r\n  private selectedNodes: Flat[] = [];\r\n  \r\n  constructor(el: HTMLElement | string, options?: Partial<Options>) {\r\n    super(['select']);\r\n    if (!el) return;\r\n    this.el = (typeof el === 'string' ? document.querySelector(el) : el) as HTMLElement;\r\n\r\n    // 合并选项\r\n    this.options = new Options().merge(options);\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    this.flatState = this.compileFlatState(this.options.data);\r\n\r\n\r\n    const container = document.createElement('div');\r\n    container.className = 'ts-tree';\r\n    this.digui(this.options.data, container);\r\n    this.el.appendChild(container);\r\n    \r\n    this.initEvents();\r\n\r\n    this.emitEvent('onInit', this.selectedNodes);\r\n  }\r\n\r\n\r\n  private initEvents() {\r\n    const arrows = this.el.querySelectorAll('.ts-tree-arrow');\r\n    const titles = this.el.querySelectorAll('.ts-tree-title');\r\n    for (let a = 0; a < arrows.length; a++) {\r\n      arrows[a].addEventListener('click', this.onToggleOpen.bind(this));\r\n    }\r\n    for (let a = 0; a < titles.length; a++) {\r\n      titles[a].addEventListener('click', this.onSelect.bind(this));\r\n    }\r\n  }\r\n\r\n  // 展开/收起\r\n  private onToggleOpen(event: MouseEvent) {\r\n    const target = <HTMLElement>event.target;\r\n    const parent = this.findParentOfUl(target);\r\n    if (parent) {\r\n      target.classList.toggle('expand');\r\n      parent.classList.toggle('expand');\r\n    }\r\n  }\r\n\r\n  // 选中节点（支持多选）\r\n  private onSelect(event: MouseEvent) {\r\n    const multipleSelect = event.ctrlKey || false;\r\n    const target = <HTMLElement>event.target;\r\n    const nodeKey = Number(target.dataset.nodeKey);\r\n    if (multipleSelect) {\r\n      this.multipleSelect(nodeKey);\r\n      target.classList.toggle('selected');\r\n    }else{\r\n      const titles = this.el.querySelectorAll('.ts-tree-title');\r\n      for (let a = 0; a < titles.length; a++) {\r\n        titles[a].classList.remove('selected');\r\n      }\r\n      target.classList.add('selected');\r\n      this.selectedNodes = [this.flatState.find(item => item.nodeKey === nodeKey)];\r\n    }\r\n    \r\n    this.emitEvent('onSelectChange', this.selectedNodes);\r\n    this.trigger('selectChange', this.selectedNodes);\r\n  }\r\n\r\n  // 多选\r\n  private multipleSelect(nodeKey: number) {\r\n    const index = this.selectedNodes.findIndex(item => item.nodeKey === nodeKey);\r\n    if (index === -1) {\r\n      this.selectedNodes.push(this.flatState.find(item => item.nodeKey === nodeKey));\r\n    }else{\r\n      this.selectedNodes.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  private digui(data: DataTree[], container: HTMLElement) {\r\n    for (let a = 0; a < data.length; a++) {\r\n      const item = data[a];\r\n      \r\n      const children = item.children;\r\n      const ul = document.createElement('ul');\r\n      ul.className = item.expand ? 'ts-tree-children expand' : 'ts-tree-children';\r\n\r\n      const li = document.createElement('li');\r\n      const arrowClassName = children ? item.expand ? 'expand' : '' : 'hide';\r\n      const titleClassName = item.selected ? 'ts-tree-title selected' : 'ts-tree-title';\r\n      li.innerHTML = `<i class=\"ts-tree-arrow ${arrowClassName}\">&gt;</i>\r\n      <span class=\"${titleClassName}\" data-node-key=\"${item.nodeKey}\">${item.title}</span>`;\r\n\r\n      if (item.selected) {\r\n        this.selectedNodes.push(this.flatState.find(i => i.nodeKey === item.nodeKey));\r\n      }\r\n      if (children && children.length) {\r\n        this.digui(item.children, li);\r\n      }\r\n      ul.appendChild(li);\r\n      container.appendChild(ul);\r\n    }\r\n  }\r\n\r\n  private findParentOfUl(target: HTMLElement): HTMLElement {\r\n    const parent = target.parentElement;\r\n    if (parent.nodeName.toLocaleLowerCase() === 'ul') {\r\n      return parent;\r\n    }else{\r\n      return this.findParentOfUl(parent);\r\n    }\r\n  }\r\n\r\n\r\n  private compileFlatState (stateTree): Flat[] {\r\n    // so we have always a relation parent/children of each node\r\n      let keyCounter = 0;\r\n      let childrenKey = 'children';\r\n      const flatTree: Flat[] = [];\r\n      function flattenChildren(node, parent?) {\r\n          node.nodeKey = keyCounter++;\r\n  \r\n          // 给每个node添加属性\r\n          flatTree[node.nodeKey] = { node: node, nodeKey: node.nodeKey };\r\n          if (typeof parent != 'undefined') {\r\n              flatTree[node.nodeKey].parent = parent.nodeKey;\r\n              // nodekey存到父级children里\r\n              flatTree[parent.nodeKey][childrenKey].push(node.nodeKey);\r\n          }\r\n  \r\n          if (node[childrenKey]) {\r\n              // 保存子节点的nodekey\r\n              flatTree[node.nodeKey][childrenKey] = [];\r\n              node[childrenKey].forEach(child => flattenChildren(child, node));\r\n          }\r\n      }\r\n      stateTree.forEach(rootNode => {\r\n          flattenChildren(rootNode);\r\n      });\r\n      return flatTree;\r\n  }\r\n\r\n\r\n  // 发射自定义事件\r\n  private emitEvent(type: string, args: Flat[]) {\r\n    if (this.options[type]) {\r\n      this.options[type](args);\r\n    }\r\n  }\r\n}","import './tree-page.less';\r\nimport Tree from './Tree.ts';\r\nimport { Flat, DataTree } from './Options';\r\n\r\nconst isCurrentPage = /tree/.test(location.href);\r\n\r\n\r\nconst data: DataTree[] = [\r\n  {\r\n    title: 'parent 1',\r\n    expand: true,\r\n    children: [\r\n      {\r\n        title: 'parent 1-1',\r\n        expand: true,\r\n        selected: true,\r\n        children: [\r\n          {\r\n            title: 'leaf 1-1-1'\r\n          },\r\n          {\r\n            title: 'leaf 1-1-2'\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        title: 'parent 1-2',\r\n        children: [\r\n          {\r\n            title: 'leaf 1-2-1'\r\n          },\r\n          {\r\n            title: 'leaf 1-2-1'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: 'parent 2',\r\n    expand: true,\r\n    children: [\r\n      {\r\n        title: 'parent 2-1',\r\n        children: [\r\n          {\r\n            title: 'leaf 2-1-1'\r\n          },\r\n          {\r\n            title: 'leaf 2-1-2',\r\n            selected: true\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        title: 'parent 2-2',\r\n        expand: true,\r\n        children: [\r\n          {\r\n            title: 'leaf 2-2-1'\r\n          },\r\n          {\r\n            title: 'leaf 2-2-2'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\n\r\nwindow.addEventListener('DOMContentLoaded', function () {\r\n  if (isCurrentPage) {\r\n    const treeBox = <HTMLElement>document.querySelector('.tree-box');\r\n    if (treeBox) {\r\n      const b = treeBox.getElementsByTagName('b')[0];\r\n      const tree = new Tree(treeBox, {\r\n        data,\r\n        onInit(node: Flat[]) {\r\n          console.log('onInit', node);\r\n          b.innerText = '当前选中（按住ctrl可多选）：' + JSON.stringify(node);\r\n        },\r\n        onSelectChange(node: Flat[]) {\r\n          console.log('onSelectChange', node);\r\n          b.innerText = '当前选中（按住ctrl可多选）：' + JSON.stringify(node);\r\n        }\r\n      });\r\n    }\r\n  }\r\n \r\n  \r\n});"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvEA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;AC9CA;;;;;;;;;;;;;;;;;ACUA;AAAA;AAqBA;AATA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;AC/BA;AACA;AAIA;AAAA;AAcA;AAAA;AAHA;AACA;AAIA;AAAA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AApBA;AAAA;AAqBA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;ACtKA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;A","sourceRoot":""}